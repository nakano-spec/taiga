#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('sotuken:server');
var http = require('http');
//var https = require('https');
var express = require('express');
const path = require('path');
var ExcelJS = require('exceljs');
var validator = require('validator');
var fs = require('fs');
var poolCluster = app.get('pool');
/*var options = {
  key: fs.readFileSync('./public/key/localhost-key.pem'),
  cert: fs.readFileSync('./public/key/localhost.pem')
};*/
/*var options2 = {
  key: fs.readFileSync('./public/key/nakano-key.pem'),
  cert: fs.readFileSync('./public/key/nakano.pem')
}/



/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);
//var server = https.createServer(options2,app);
var { Server } =require("socket.io");
var io = new Server(server);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port,'0.0.0.0', () => {console.log('サーバ起動しました。\nlistening on "[このサーバ機のIPアドレス]:3000"');});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

const mysql = require('mysql');
const store = require('store');

io.on('connection', (socket) => {//ページが繋がったとき

  const mysql_setting = {
    host: 'localhost',
    user: 'root',
    password: '20010426',
    database: 'mydb'
  }
  const connection = mysql.createConnection(mysql_setting);
  connection.connect();
  // new_player
  socket.on('new_btnclick', (name,pass1,pass2) => {

    if(pass1 == pass2) {
      var new_select1 = "select username from users2 where username = ?;"
      var new_select2 = "select password from users2 where password = ?;"
      connection.query(new_select1,name,(err, new_result1, fields) => {
        connection.query(new_select2,pass1,(err, new_result2, fields) => {
          if(new_result1.length < 1 && pass1.length >= 8 && pass1.length <= 16 && pass1.length != 0 && name.length >= 2 && name.length <= 10) {
            var new_insert1 = "insert into users2(username,password,touroku,kousin) values (?,'test','2022{01>01','2022{01>01');"
            var new_update1 = "update users2 set password = ? ORDER BY user_id DESC LIMIT 1;"
            connection.query(new_insert1,name,(err, new_result3, fields) => {
              connection.query(new_update1,pass1,(err, new_result4, fields) => {
                connection.commit((err) =>{
                  if(err){connection.rollback(() =>{throw console.log('error');});}
                  connection.end();
                })
                var new_flug = 1;
                io.emit('new_flug',new_flug);
              })
            })
          }
        })
      })
    }
  })
  
  
  socket.on('filedata',(data) =>{
    var q1 = "insert into mondai_LIST values(?,?,?,?,?,?,?,?,?);"
    var q2 = "select id from mondai_LIST where id = ?;"

    for(var i = 0;i<data.length;i++){
      var da = data[i];
      connection.query(q1,da,(err,res1,fields)=>{
        if(err){
          console.log(err);
        }
        connection.commit((err) =>{
        if(err){connection.rollback(() =>{throw console.log('error');});}
        connection.end();
      })
    })
    }
        io.emit('kanryou');
  })

  socket.on('syokika',()=>{
     var sql1="truncate table time_LIST;"
     var sql2="truncate table kaitou_LIST;"
     var sql3="update mondai_LIST set sentaku= 0 where sentaku = 1"

     connection.query(sql1,(err,result1,fields)=>{
      if(err){
        console.log(err);
      }
      connection.query(sql2,(err,result2,fields)=>{
        if(err){
          console.log(err);
        }
        connection.query(sql3,(err,results2,fields)=>{
          if(err){
            console.log(err);
          }
          connection.commit((err) =>{
            if(err){connection.rollback(() =>{throw console.log('error');});}
            io.emit('modoru');
          })
          connection.end();
        })
      })
     })
  })

  socket.on('hyou',(c) =>{
      io.emit('hyouji',c);
    })

  socket.on('kekkahyouji',()=>{
      io.emit('kekkahyouji2');
  })
  // login
  socket.on('login_btnclick', (login_name,login_pass1) => {
        if(login_pass1 != '') {
          var login_select1 = "select username from users where username = ?;"
          var login_select2 = "select password from users where password = ?;"
          var login_select3 = "select password from users where username = ?;"
          var login_select4 = "select user_ID from users where username = ?;"
          connection.query(login_select1,login_name,(err, login_result1, fields) => {
            if(err){
              console.log(err);
              var new_flug = 0;
              io.emit('new_flug',new_flug);
            }
            connection.query(login_select2,login_pass1,(err, login_result2, fields) => {
              if(err){
                console.log(err);
                var new_flug = 0;
                io.emit('new_flug',new_flug);
              }
              if(login_result1.length >= 1 && login_result2.length >= 1) {
                connection.query(login_select3,login_name,(err, login_result3, fields) => {
                  if(login_result3[0].password == login_pass1) {
                    if(err){
                      console.log(err);
                      var new_flug = 0;
                      io.emit('new_flug',new_flug);
                    }
                    connection.query(login_select4,login_name,(err,login_result4,fields) =>{
                      if(err){
                        console.log(err);
                        var new_flug = 0;
                        io.emit('new_flug',new_flug);
                      }

                      if(login_result4[0].user_ID < 100)
                      {
                        var login_flug = 1;
                        io.emit('login_flug',login_flug,login_name);
                      }else if(login_result4[0].user_ID > 100 && login_result4[0].user_ID < 9999)
                      {
                        var login_flug = 1;
                        io.emit('login_flug1',login_flug,login_name);
                      }else if(login_result4[0].user_ID > 10000)
                      {
                        var login_flug = 1;
                        io.emit('login_flug2',login_flug,login_name);
                      }
                      connection.end();
                    })
                  }else{
                    var new_flug=0;
                    io.emit('new_flug',new_flug);
                  }
                })
              }
            })
        })
      }
    })

        socket.on('owa2',() =>{
          io.emit('owari');
        })

    socket.on('mondai_btnclick',(mondai,o) => {
    
      if(mondai != ''){
        var pool = poolCluster.of('MASTER');
        var mondai_select = "select mon_ID,mondaibun from mondai_LIST where sentaku = 1;"
        let mondai_sentaku = "update mondai_LIST set sentaku = '1' where name = ?;"
        let sql3 = "insert into monhan_LIST values(?,?);"
        let sql4 = "select han_ID from hankeisiki_LIST where han_keisiki = ?;"
        pool.getConnection(function(err,connection){
          if(err != null){
            console.log(err);
            return;
          }
          connection.query(mondai_sentaku,mondai,(err,mondai_result,fields) =>{
            console.log(err);
            connection.query(mondai_select,(err,mondai_result2,fields)=>{
              if(err){
              var flag = 0;
              io.emit('mondai_kekka',flag);
            }
            connection.commit((err) =>{
              if(err){connection.rollback(() =>{throw console.log('error');});}
            })
            var ID = mondai_result2[0].mon_ID;
            connection.query(sql4,o,(err,result,fields) =>{
              if(err){
                console.log(err);
              }
              var han1 = result[0].han_ID;
              connection.query(sql3,[ID,han1],(err,result,fields)=>{
                if(err){
                  console.log(err);
                }
                connection.commit((err) =>{
                  if(err){connection.rollback(() =>{throw console.log('error');});}
                  connection.release();
                })
              })
            })
            var flag = 1;
            io.emit('mondai_kekka',flag);
            })
          })
        })
    }
  })
   socket.on('kiroku',(m1,kaitou1) =>{

    let monname = 'select mon_ID from mondai_LIST where sentaku = 1;'
    let seikai = 'select kaitou from mondai_LIST where sentaku = 1;'
    let tuika = 'insert into kaitou_LIST values(?,?,?,?);'
    let userIDSELECT = 'select user_ID from users where username = ?;'
    let update1 = "update kaitou_LIST set user_ID = ? where user_ID = '9999';"
    connection.query(monname,(err,result,fields)=>{
      if(err){
        console.log(err);
      }
      var idi = result[0].mon_ID;
      var hantei = "✕"
        var addsqlparams = ['9999',idi,kaitou1,hantei];
        connection.query(tuika,addsqlparams,(err,result,fields) =>{
          if(err){
          console.log(err);
        }
        connection.commit((err) =>{
          if(err){connection.rollback(() =>{throw console.log('error');});}
        })
        connection.query(userIDSELECT,m1,(err,result_user,fields)=>{
          if(err){
            console.log(err);
          }
          var user_I = result_user[0].user_ID
          connection.query(update1,user_I,(err,result_user2,fields)=>{
            if(err){
              console.log(err);
            }
            connection.commit((err) =>{
              if(err){connection.rollback(() =>{throw console.log('error');});}
              connection.end();
            })
          })
        })
        io.emit('owari');
        })
      })
   })
  });



